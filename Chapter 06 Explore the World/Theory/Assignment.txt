Microservice:
A microservice is an architectural approach where an application is built as a collection of loosely coupled, independently deployable services. Each microservice is a self-contained unit responsible for a specific business capability and communicates with other microservices over the network. This approach aims to make development, deployment, and scalability easier by allowing each service to be developed, deployed, and maintained independently.

Monolith Architecture:
A monolith architecture is an older architectural style where the entire application is built as a single, tightly integrated unit. All components and functionality are bundled together into a single codebase, and the application is usually deployed as a single unit. Monoliths are simpler to develop initially but can become harder to manage and scale as they grow in size and complexity.

Difference between Monolith and Microservice:
The key difference lies in how an application is structured and deployed. Monoliths are a single unit, while microservices break an application into smaller, independent services. Microservices offer better scalability, resilience, and flexibility but introduce challenges in terms of complexity and coordination between services.

useEffect Hook:
useEffect is a React Hook that allows you to perform side effects in functional components. It's commonly used for tasks like data fetching, DOM manipulation, and subscriptions. It's especially useful in scenarios where you need to interact with the external world (like APIs) from within a React component.

Optional Chaining:
Optional chaining (?.) is a JavaScript feature that allows you to access properties or call methods of an object without worrying if the object is null or undefined. If the property or method doesn't exist, the expression returns undefined instead of throwing an error.

Shimmer UI:
Shimmer UI is a design pattern used to provide a loading or placeholder animation in place of actual content while data is being fetched or loaded. It's commonly used to improve user experience during data loading.

Difference between JS Expression and JS Statement:
An expression in JavaScript produces a value and can be used wherever a value is expected. A statement is a unit of code that performs an action. Expressions often form part of statements. For example, x + y is an expression that produces a value, and if (condition) is a statement that performs an action conditionally.

Conditional Rendering:
Conditional rendering in React involves showing different UI components or content based on a condition. For example, you might render one component if a certain condition is met and another component if it's not. Here's an example:

jsx
Copy code
function ExampleComponent({ isLoggedIn }) {
  return (
    <div>
      {isLoggedIn ? <UserDashboard /> : <LoginForm />}
    </div>
  );
}
CORS (Cross-Origin Resource Sharing):
CORS is a security feature implemented by web browsers that controls which origins (domains) are allowed to access resources on a web page. It's used to prevent potentially malicious scripts from making requests to other domains on behalf of the user.

async and await:
async and await are JavaScript keywords used for working with asynchronous operations in a more readable and synchronous-like manner. The async keyword is used to define a function that returns a promise, and the await keyword is used inside an async function to pause execution until the promise is resolved.

const json = await data.json(); in getRestaurants():
In the getRestaurants() function, data.json() is used to parse the response from the HTTP request (data) into JSON format. The await keyword is used to pause execution of the function until the JSON parsing is complete. The parsed JSON data is then stored in the json constant, which can be further used in your code.